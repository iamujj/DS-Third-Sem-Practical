#include <stdio.h>
#include <stdlib.h>

//structure of a tree node
struct node {
	int data;
	struct node* left;
	struct node* right;
};

//this function helps in creating nodes of the tree
struct node* newNode(int data)
{
	struct node* node = (struct node*)malloc(sizeof(struct node));
	node->data = data;
	node->left = NULL;
	node->right = NULL;

	return (node);
}

//prototypes
void printCurrentLevel(struct node* root, int level);
int height(struct node* node);
struct node* newNode(int data);

void printLevelOrder(struct node* root)
{
	int h = height(root);
	int i;
	for (i = 1; i <= h; i++)
		printCurrentLevel(root, i);
}

// Print nodes at a current level
void printCurrentLevel(struct node* root, int level)
{
	if (root == NULL)
		return;
	if (level == 1)
		printf("%d ", root->data);
	else if (level > 1)
	{
		printCurrentLevel(root->left, level - 1);
		printCurrentLevel(root->right, level - 1);
	}
}

int height(struct node* node)
{
	if (node == NULL)
		return 0;
	else
	{
		int lheight = height(node->left);
		int rheight = height(node->right);

		if (lheight > rheight)
			return (lheight + 1);
		else
			return (rheight + 1);
	}
}

void printPostorder(struct node* node)
{
	if (node == NULL)
		return;

	printPostorder(node->left);

	printPostorder(node->right);

	printf("%d ", node->data);
}

void printInorder(struct node* node)
{
	if (node == NULL)
		return;

	printInorder(node->left);

	printf("%d ", node->data);

	printInorder(node->right);
}

void printPreorder(struct node* node)
{
	if (node == NULL)
		return;

	printf("%d ", node->data);

	printPreorder(node->left);

	printPreorder(node->right);
}

int main()
{
	struct node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->left->right = newNode(5);
	root->right->left = newNode(6);
	root->right->right = newNode(7);
	root->left->left->left = newNode(8);
	root->left->left->right = newNode(9);
	root->right->left->right = newNode(10);

	/*
						    1
					   /     \
					  2       3
					/   \   /   \
				 4     5 6     7
			  / \       \
			 8   9      10
	*/

	printf("\nPreorder traversal of binary tree is \n");
	printPreorder(root);

	printf("\n\nInorder traversal of binary tree is \n");
	printInorder(root);

	printf("\n\nPostorder traversal of binary tree is \n");
	printPostorder(root);

	printf("\n\nLevel Order traversal of binary tree is \n");
	printLevelOrder(root);

	getchar();
	return 0;
}
